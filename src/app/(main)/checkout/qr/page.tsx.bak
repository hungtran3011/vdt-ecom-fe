'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Image from 'next/image';
import Card from '@/components/Card';
import Button from '@/components/Button';
import Snackbar from '@/components/Snackbar';
import { useCartContext } from '@/contexts/CartContext';
import paymentService from '@/services/paymentService';
import { OrderService } from '@/services/orderService';
import { formatVND } from '@/utils/currency';

interface QRPaymentStatus {
  orderId: string;
  orderStatus: string;
  transactionStatus: string;
  vtRequestId: string;
  errorCode: string;
  lastUpdated: string;
}

const QRPaymentPage = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { clearCart } = useCartContext();
  const orderService = new OrderService();
  
  const orderId = searchParams.get('orderId');
  const qrCode = searchParams.get('qrCode');
  const message = searchParams.get('message');
  
  const [paymentStatus, setPaymentStatus] = useState<QRPaymentStatus | null>(null);
  const [countdown, setCountdown] = useState(600); // 10 minutes
  const [isPolling, setIsPolling] = useState(true);
  const [isExpired, setIsExpired] = useState(false);
  const [order, setOrder] = useState<any>(null);
  
  // Snackbar state
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState<'info' | 'success' | 'warning' | 'error'>('info');

  const showSnackbar = (message: string, severity: 'info' | 'success' | 'warning' | 'error' = 'info') => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(true);
  };

  // Check payment status
  const checkPaymentStatus = useCallback(async () => {
    if (!orderId) return;
    
    try {
      const status = await paymentService.checkPaymentStatus(orderId);
      setPaymentStatus(status);
      
      // If payment is successful, clear cart and redirect
      if (status.transactionStatus === 'SUCCESS' || status.orderStatus === 'PAID') {
        setIsPolling(false);
        clearCart();
        showSnackbar('Thanh toán thành công!', 'success');
        
        setTimeout(() => {
          router.push(`/checkout/success?orderId=${orderId}&message=${encodeURIComponent('Thanh toán thành công!')}`);
        }, 2000);
      } else if (status.transactionStatus === 'FAILED' || (status.errorCode && status.errorCode !== '00')) {
        setIsPolling(false);
        showSnackbar('Thanh toán thất bại. Vui lòng thử lại.', 'error');
        
        setTimeout(() => {
          router.push(`/checkout?error=${encodeURIComponent('Thanh toán thất bại')}`);
        }, 3000);
      }
    } catch (error) {
      console.error('Error checking payment status:', error);
    }
  }, [orderId, clearCart, router]);

  // Load order details
  useEffect(() => {
    if (orderId) {
      const loadOrder = async () => {
        try {
          const orderData = await orderService.getOrderById(orderId);
          setOrder(orderData);
        } catch (error) {
          console.error('Error loading order:', error);
        }
      };
      
      loadOrder();
    }
  }, [orderId, orderService]);

  // Start polling for payment status
  useEffect(() => {
    if (!isPolling || !orderId) return;
    
    // Initial check
    checkPaymentStatus();
    
    // Poll every 3 seconds
    const interval = setInterval(checkPaymentStatus, 3000);
    
    return () => clearInterval(interval);
  }, [isPolling, orderId, checkPaymentStatus]);

  // Countdown timer
  useEffect(() => {
    if (countdown <= 0) {
      setIsExpired(true);
      setIsPolling(false);
      showSnackbar('QR Code đã hết hạn. Vui lòng tạo đơn hàng mới.', 'warning');
      return;
    }
    
    const timer = setTimeout(() => {
      setCountdown(prev => prev - 1);
    }, 1000);
    
    return () => clearTimeout(timer);
  }, [countdown]);

  // Format countdown time
  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const handleReturnToCheckout = () => {
    router.push('/checkout');
  };

  const handleRefreshStatus = () => {
    if (!isExpired) {
      checkPaymentStatus();
    }
  };
        setStatusMessage('Đang chờ thanh toán...');
      }
    } catch (error) {
      console.error('Error checking payment status:', error);
      setPaymentStatus('pending');
      setStatusMessage('Đang chờ thanh toán...');
    }
  };

  // Start checking payment status when component mounts
  useEffect(() => {
    if (orderId && !checkingInterval) {
      // Check immediately
      checkPaymentStatus();
      
      // Then check every 3 seconds
      const interval = setInterval(checkPaymentStatus, 3000);
      setCheckingInterval(interval);
      
      // Cleanup interval after 10 minutes
      const timeout = setTimeout(() => {
        if (interval) {
          clearInterval(interval);
          setCheckingInterval(null);
        }
      }, 600000); // 10 minutes
      
      return () => {
        clearInterval(interval);
        clearTimeout(timeout);
      };
    }
  }, [orderId, checkingInterval, checkPaymentStatus]);

  // Cleanup interval on unmount
  useEffect(() => {
    return () => {
      if (checkingInterval) {
        clearInterval(checkingInterval);
      }
    };
  }, [checkingInterval]);

  if (!orderId || !qrCode) {
    return (
      <div className="container mx-auto px-4 py-8 bg-[var(--md-sys-color-background)] min-h-screen">
        <div className="max-w-2xl mx-auto text-center">
          <div className="rounded-lg shadow-lg p-12 bg-[var(--md-sys-color-surface-container)]">
            <div className="w-20 h-20 mx-auto mb-6 rounded-full flex items-center justify-center bg-[var(--md-sys-color-error-container)]">
              <span className="mdi text-4xl text-[var(--md-sys-color-on-error-container)]">close</span>
            </div>
            <h1 className="text-3xl font-bold mb-4 text-[var(--md-sys-color-on-surface)]">Thông tin không hợp lệ</h1>
            <p className="text-lg mb-8 text-[var(--md-sys-color-on-surface-variant)]">Không tìm thấy thông tin thanh toán.</p>
            <Link href="/checkout">
              <Button 
                variant="filled" 
                className="px-6 py-2 bg-[var(--md-sys-color-primary)] text-[var(--md-sys-color-on-primary)]"
              >
                Quay lại thanh toán
              </Button>
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8 bg-[var(--md-sys-color-background)] min-h-screen">
      <div className="max-w-2xl mx-auto">
        <div className="rounded-lg shadow-lg p-8 bg-[var(--md-sys-color-surface-container)]">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold mb-2 text-[var(--md-sys-color-on-surface)]">
              Thanh toán QR Code
            </h1>
            <p className="text-[var(--md-sys-color-on-surface-variant)]">
              Quét mã QR bằng ứng dụng Viettel Money để thanh toán
            </p>
          </div>

          {/* Order Info */}
          <div className="rounded-lg p-4 mb-6 bg-[var(--md-sys-color-surface-variant)]">
            <div className="flex justify-between items-center">
              <span className="text-sm font-medium text-[var(--md-sys-color-on-surface-variant)]">Mã đơn hàng:</span>
              <span className="text-sm font-semibold text-[var(--md-sys-color-on-surface)]">#{orderId}</span>
            </div>
          </div>

          {/* QR Code */}
          <div className="flex justify-center mb-8">
            <div className="p-6 rounded-lg border-2 shadow-sm bg-[var(--md-sys-color-surface)] border-[var(--md-sys-color-outline-variant)]">
              <img 
                src={`data:image/png;base64,${qrCode}`}
                alt="QR Code for payment"
                className="w-64 h-64 object-contain"
                onError={(e) => {
                  // If QR code fails to load, show placeholder
                  const target = e.target as HTMLImageElement;
                  target.style.display = 'none';
                  target.nextElementSibling?.classList.remove('hidden');
                }}
              />
              <div className="w-64 h-64 rounded-lg flex items-center justify-center bg-[var(--md-sys-color-surface-variant)]" 
                   style={{ display: 'none' }}>
                <div className="text-center">
                  <span className="mdi text-4xl mb-2 text-[var(--md-sys-color-on-surface-variant)]">qr_code</span>
                  <p className="text-[var(--md-sys-color-on-surface-variant)]">Không thể hiển thị mã QR</p>
                </div>
              </div>
            </div>
          </div>

          {/* Status */}
          <div className="text-center mb-6">
            <div className={`inline-flex items-center gap-2 px-4 py-2 rounded-full ${
              paymentStatus === 'success' ? '' :
              paymentStatus === 'failed' ? '' :
              paymentStatus === 'checking' ? '' :
              ''
            }`} style={{
              backgroundColor: 
                paymentStatus === 'success' ? 'var(--md-sys-color-tertiary-container)' :
                paymentStatus === 'failed' ? 'var(--md-sys-color-error-container)' :
                paymentStatus === 'checking' ? 'var(--md-sys-color-primary-container)' :
                'var(--md-sys-color-secondary-container)',
              color:
                paymentStatus === 'success' ? 'var(--md-sys-color-on-tertiary-container)' :
                paymentStatus === 'failed' ? 'var(--md-sys-color-on-error-container)' :
                paymentStatus === 'checking' ? 'var(--md-sys-color-on-primary-container)' :
                'var(--md-sys-color-on-secondary-container)'
            }}>
              {paymentStatus === 'checking' && (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current"></div>
              )}
              {paymentStatus === 'success' && <span className="mdi text-sm">check_circle</span>}
              {paymentStatus === 'failed' && <span className="mdi text-sm">error</span>}
              {paymentStatus === 'pending' && <span className="mdi text-sm">schedule</span>}
              <span className="font-medium">{statusMessage}</span>
            </div>
          </div>

          {/* Instructions */}
          <div className="rounded-lg p-6 mb-6" style={{ backgroundColor: 'var(--md-sys-color-primary-container)' }}>
            <h3 className="font-semibold mb-3" style={{ color: 'var(--md-sys-color-on-primary-container)' }}>Hướng dẫn thanh toán:</h3>
            <ol className="text-sm space-y-2" style={{ color: 'var(--md-sys-color-on-primary-container)' }}>
              <li className="flex items-start gap-2">
                <span className="font-medium">1.</span>
                <span>Mở ứng dụng Viettel Money trên điện thoại</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="font-medium">2.</span>
                <span>Chọn chức năng &quot;Quét mã QR&quot; hoặc &quot;Thanh toán&quot;</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="font-medium">3.</span>
                <span>Quét mã QR code hiển thị trên màn hình này</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="font-medium">4.</span>
                <span>Xác nhận thông tin và hoàn tất thanh toán</span>
              </li>
            </ol>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button 
              onClick={checkPaymentStatus}
              variant="filled" 
              className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2"
              disabled={paymentStatus === 'checking'}
            >
              {paymentStatus === 'checking' ? 'Đang kiểm tra...' : 'Kiểm tra thanh toán'}
            </Button>
            
            {paymentStatus === 'failed' && (
              <Link href="/checkout">
                <Button 
                  variant="outlined" 
                  className="border-gray-300 text-gray-700 hover:bg-gray-50 px-6 py-2"
                >
                  Thử phương thức khác
                </Button>
              </Link>
            )}
          </div>

          {/* Support Info */}
          <div className="mt-8 p-4 bg-gray-50 rounded-lg">
            <h4 className="font-medium text-gray-900 mb-2">Cần hỗ trợ?</h4>
            <p className="text-sm text-gray-700 mb-2">
              Nếu bạn gặp khó khăn trong việc thanh toán, vui lòng liên hệ:
            </p>
            <div className="text-sm text-gray-700">
              <div>📧 Email: support@vdt-ecom.com</div>
              <div>📞 Hotline: 1900-1234</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QRPaymentPage;
